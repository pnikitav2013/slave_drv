
slave_spi_stm32f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001744  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001914  08001914  00011914  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001984  08001984  00011984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800198c  0800198c  0001198c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001990  08001990  00011990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08001994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000030  20000070  08001a04  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000a0  08001a04  000200a0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009be9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001611  00000000  00000000  00029c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015ff  00000000  00000000  0002b29a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000390  00000000  00000000  0002c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000004f8  00000000  00000000  0002cc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000244d  00000000  00000000  0002d128  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000020d3  00000000  00000000  0002f575  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00031648  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000b80  00000000  00000000  000316c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080018fc 	.word	0x080018fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080018fc 	.word	0x080018fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
{
 80005c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f888 	bl	80006ec <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 f84a 	bl	8000684 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x30>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000612:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000622:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f81b 	bl	8000660 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffc8 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f000 fc6c 	bl	8000f0c <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40023c00 	.word	0x40023c00

0800063c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x10>)
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_IncTick+0x14>)
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	440b      	add	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000098 	.word	0x20000098

08000660 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000662:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000664:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	0c1b      	lsrs	r3, r3, #16
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000670:	0200      	lsls	r0, r0, #8
 8000672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000676:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800067a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800067c:	60d3      	str	r3, [r2, #12]
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000686:	b530      	push	{r4, r5, lr}
 8000688:	68dc      	ldr	r4, [r3, #12]
 800068a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	2b04      	cmp	r3, #4
 8000696:	bf28      	it	cs
 8000698:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 0501 	mov.w	r5, #1
 80006a0:	fa05 f303 	lsl.w	r3, r5, r3
 80006a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a8:	bf8c      	ite	hi
 80006aa:	3c03      	subhi	r4, #3
 80006ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ae:	4019      	ands	r1, r3
 80006b0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b2:	fa05 f404 	lsl.w	r4, r5, r4
 80006b6:	3c01      	subs	r4, #1
 80006b8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	ea42 0201 	orr.w	r2, r2, r1
 80006c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	bfaf      	iteee	ge
 80006c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	f000 000f 	andlt.w	r0, r0, #15
 80006ce:	4b06      	ldrlt	r3, [pc, #24]	; (80006e8 <HAL_NVIC_SetPriority+0x64>)
 80006d0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	bfa5      	ittet	ge
 80006d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006d8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	e000ed14 	.word	0xe000ed14

080006ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	3801      	subs	r0, #1
 80006ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f2:	d20a      	bcs.n	800070a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	21f0      	movs	r1, #240	; 0xf0
 80006fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800070a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e010 	.word	0xe000e010
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800071a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800071c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800071e:	bf0c      	ite	eq
 8000720:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000724:	f022 0204 	bicne.w	r2, r2, #4
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	4770      	bx	lr
 800072c:	e000e010 	.word	0xe000e010

08000730 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000730:	4770      	bx	lr

08000732 <HAL_SYSTICK_IRQHandler>:
{
 8000732:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000734:	f7ff fffc 	bl	8000730 <HAL_SYSTICK_Callback>
 8000738:	bd08      	pop	{r3, pc}
	...

0800073c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800073c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000740:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000742:	4604      	mov	r4, r0
 8000744:	b910      	cbnz	r0, 800074c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000746:	2001      	movs	r0, #1
 8000748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800074c:	4b44      	ldr	r3, [pc, #272]	; (8000860 <HAL_RCC_ClockConfig+0x124>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	f002 020f 	and.w	r2, r2, #15
 8000754:	428a      	cmp	r2, r1
 8000756:	d328      	bcc.n	80007aa <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000758:	6821      	ldr	r1, [r4, #0]
 800075a:	078f      	lsls	r7, r1, #30
 800075c:	d42d      	bmi.n	80007ba <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800075e:	07c8      	lsls	r0, r1, #31
 8000760:	d440      	bmi.n	80007e4 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000762:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <HAL_RCC_ClockConfig+0x124>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	f002 020f 	and.w	r2, r2, #15
 800076a:	4295      	cmp	r5, r2
 800076c:	d366      	bcc.n	800083c <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800076e:	6822      	ldr	r2, [r4, #0]
 8000770:	0751      	lsls	r1, r2, #29
 8000772:	d46c      	bmi.n	800084e <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000774:	0713      	lsls	r3, r2, #28
 8000776:	d507      	bpl.n	8000788 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000778:	4a3a      	ldr	r2, [pc, #232]	; (8000864 <HAL_RCC_ClockConfig+0x128>)
 800077a:	6921      	ldr	r1, [r4, #16]
 800077c:	6893      	ldr	r3, [r2, #8]
 800077e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000782:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000786:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000788:	f000 f878 	bl	800087c <HAL_RCC_GetSysClockFreq>
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <HAL_RCC_ClockConfig+0x128>)
 800078e:	4a36      	ldr	r2, [pc, #216]	; (8000868 <HAL_RCC_ClockConfig+0x12c>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	40d8      	lsrs	r0, r3
 800079a:	4b34      	ldr	r3, [pc, #208]	; (800086c <HAL_RCC_ClockConfig+0x130>)
 800079c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ff0e 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 80007a4:	2000      	movs	r0, #0
 80007a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80007aa:	b2ca      	uxtb	r2, r1
 80007ac:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	4299      	cmp	r1, r3
 80007b6:	d1c6      	bne.n	8000746 <HAL_RCC_ClockConfig+0xa>
 80007b8:	e7ce      	b.n	8000758 <HAL_RCC_ClockConfig+0x1c>
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80007bc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80007c0:	bf1e      	ittt	ne
 80007c2:	689a      	ldrne	r2, [r3, #8]
 80007c4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80007c8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80007ca:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80007cc:	bf42      	ittt	mi
 80007ce:	689a      	ldrmi	r2, [r3, #8]
 80007d0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80007d4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80007d6:	689a      	ldr	r2, [r3, #8]
 80007d8:	68a0      	ldr	r0, [r4, #8]
 80007da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80007de:	4302      	orrs	r2, r0
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	e7bc      	b.n	800075e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80007e4:	6862      	ldr	r2, [r4, #4]
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <HAL_RCC_ClockConfig+0x128>)
 80007e8:	2a01      	cmp	r2, #1
 80007ea:	d11d      	bne.n	8000828 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007f2:	d0a8      	beq.n	8000746 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80007f4:	4e1b      	ldr	r6, [pc, #108]	; (8000864 <HAL_RCC_ClockConfig+0x128>)
 80007f6:	68b3      	ldr	r3, [r6, #8]
 80007f8:	f023 0303 	bic.w	r3, r3, #3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000800:	f7ff ff28 	bl	8000654 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000804:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000808:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800080a:	68b3      	ldr	r3, [r6, #8]
 800080c:	6862      	ldr	r2, [r4, #4]
 800080e:	f003 030c 	and.w	r3, r3, #12
 8000812:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000816:	d0a4      	beq.n	8000762 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000818:	f7ff ff1c 	bl	8000654 <HAL_GetTick>
 800081c:	1bc0      	subs	r0, r0, r7
 800081e:	4540      	cmp	r0, r8
 8000820:	d9f3      	bls.n	800080a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000822:	2003      	movs	r0, #3
}
 8000824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000828:	1e91      	subs	r1, r2, #2
 800082a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800082c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800082e:	d802      	bhi.n	8000836 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000830:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000834:	e7dd      	b.n	80007f2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000836:	f013 0f02 	tst.w	r3, #2
 800083a:	e7da      	b.n	80007f2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800083c:	b2ea      	uxtb	r2, r5
 800083e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	429d      	cmp	r5, r3
 8000848:	f47f af7d 	bne.w	8000746 <HAL_RCC_ClockConfig+0xa>
 800084c:	e78f      	b.n	800076e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800084e:	4905      	ldr	r1, [pc, #20]	; (8000864 <HAL_RCC_ClockConfig+0x128>)
 8000850:	68e0      	ldr	r0, [r4, #12]
 8000852:	688b      	ldr	r3, [r1, #8]
 8000854:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000858:	4303      	orrs	r3, r0
 800085a:	608b      	str	r3, [r1, #8]
 800085c:	e78a      	b.n	8000774 <HAL_RCC_ClockConfig+0x38>
 800085e:	bf00      	nop
 8000860:	40023c00 	.word	0x40023c00
 8000864:	40023800 	.word	0x40023800
 8000868:	08001940 	.word	0x08001940
 800086c:	20000008 	.word	0x20000008

08000870 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000870:	4b01      	ldr	r3, [pc, #4]	; (8000878 <HAL_RCC_GetHCLKFreq+0x8>)
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008

0800087c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800087c:	4920      	ldr	r1, [pc, #128]	; (8000900 <HAL_RCC_GetSysClockFreq+0x84>)
{
 800087e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000880:	688b      	ldr	r3, [r1, #8]
 8000882:	f003 030c 	and.w	r3, r3, #12
 8000886:	2b08      	cmp	r3, #8
 8000888:	d007      	beq.n	800089a <HAL_RCC_GetSysClockFreq+0x1e>
 800088a:	2b0c      	cmp	r3, #12
 800088c:	d020      	beq.n	80008d0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800088e:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <HAL_RCC_GetSysClockFreq+0x88>)
 8000890:	481d      	ldr	r0, [pc, #116]	; (8000908 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000892:	2b04      	cmp	r3, #4
 8000894:	bf18      	it	ne
 8000896:	4610      	movne	r0, r2
 8000898:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800089a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800089c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800089e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80008a0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80008a4:	bf14      	ite	ne
 80008a6:	4818      	ldrne	r0, [pc, #96]	; (8000908 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80008a8:	4816      	ldreq	r0, [pc, #88]	; (8000904 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80008aa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80008ae:	bf18      	it	ne
 80008b0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80008b6:	fba1 0100 	umull	r0, r1, r1, r0
 80008ba:	f7ff fcf9 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HAL_RCC_GetSysClockFreq+0x84>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80008c6:	3301      	adds	r3, #1
 80008c8:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80008ca:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008ce:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008d0:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80008d2:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80008d4:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80008d6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80008da:	bf14      	ite	ne
 80008dc:	480a      	ldrne	r0, [pc, #40]	; (8000908 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80008de:	4809      	ldreq	r0, [pc, #36]	; (8000904 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80008e0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80008e4:	bf18      	it	ne
 80008e6:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80008ec:	fba1 0100 	umull	r0, r1, r1, r0
 80008f0:	f7ff fcde 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <HAL_RCC_GetSysClockFreq+0x84>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80008fc:	e7e5      	b.n	80008ca <HAL_RCC_GetSysClockFreq+0x4e>
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	00f42400 	.word	0x00f42400
 8000908:	017d7840 	.word	0x017d7840

0800090c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800090c:	6803      	ldr	r3, [r0, #0]
{
 800090e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000912:	07df      	lsls	r7, r3, #31
{
 8000914:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000916:	d410      	bmi.n	800093a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	079e      	lsls	r6, r3, #30
 800091c:	d467      	bmi.n	80009ee <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	071a      	lsls	r2, r3, #28
 8000922:	f100 80b2 	bmi.w	8000a8a <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	075b      	lsls	r3, r3, #29
 800092a:	f100 80d0 	bmi.w	8000ace <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800092e:	69a2      	ldr	r2, [r4, #24]
 8000930:	2a00      	cmp	r2, #0
 8000932:	f040 8139 	bne.w	8000ba8 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000936:	2000      	movs	r0, #0
 8000938:	e01e      	b.n	8000978 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800093a:	4b97      	ldr	r3, [pc, #604]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	f002 020c 	and.w	r2, r2, #12
 8000942:	2a04      	cmp	r2, #4
 8000944:	d010      	beq.n	8000968 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800094c:	2a08      	cmp	r2, #8
 800094e:	d102      	bne.n	8000956 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	025d      	lsls	r5, r3, #9
 8000954:	d408      	bmi.n	8000968 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000956:	4b90      	ldr	r3, [pc, #576]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800095e:	2a0c      	cmp	r2, #12
 8000960:	d10d      	bne.n	800097e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	0250      	lsls	r0, r2, #9
 8000966:	d50a      	bpl.n	800097e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000968:	4b8b      	ldr	r3, [pc, #556]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	0399      	lsls	r1, r3, #14
 800096e:	d5d3      	bpl.n	8000918 <HAL_RCC_OscConfig+0xc>
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1d0      	bne.n	8000918 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000976:	2001      	movs	r0, #1
}
 8000978:	b002      	add	sp, #8
 800097a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800097e:	6862      	ldr	r2, [r4, #4]
 8000980:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000984:	d111      	bne.n	80009aa <HAL_RCC_OscConfig+0x9e>
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800098c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800098e:	f7ff fe61 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000992:	4d81      	ldr	r5, [pc, #516]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000994:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000996:	682b      	ldr	r3, [r5, #0]
 8000998:	039a      	lsls	r2, r3, #14
 800099a:	d4bd      	bmi.n	8000918 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800099c:	f7ff fe5a 	bl	8000654 <HAL_GetTick>
 80009a0:	1b80      	subs	r0, r0, r6
 80009a2:	2864      	cmp	r0, #100	; 0x64
 80009a4:	d9f7      	bls.n	8000996 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 80009a6:	2003      	movs	r0, #3
 80009a8:	e7e6      	b.n	8000978 <HAL_RCC_OscConfig+0x6c>
 80009aa:	4d7b      	ldr	r5, [pc, #492]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ac:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80009b0:	682b      	ldr	r3, [r5, #0]
 80009b2:	d107      	bne.n	80009c4 <HAL_RCC_OscConfig+0xb8>
 80009b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b8:	602b      	str	r3, [r5, #0]
 80009ba:	682b      	ldr	r3, [r5, #0]
 80009bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c0:	602b      	str	r3, [r5, #0]
 80009c2:	e7e4      	b.n	800098e <HAL_RCC_OscConfig+0x82>
 80009c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c8:	602b      	str	r3, [r5, #0]
 80009ca:	682b      	ldr	r3, [r5, #0]
 80009cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d1db      	bne.n	800098e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80009d6:	f7ff fe3d 	bl	8000654 <HAL_GetTick>
 80009da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	039b      	lsls	r3, r3, #14
 80009e0:	d59a      	bpl.n	8000918 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e2:	f7ff fe37 	bl	8000654 <HAL_GetTick>
 80009e6:	1b80      	subs	r0, r0, r6
 80009e8:	2864      	cmp	r0, #100	; 0x64
 80009ea:	d9f7      	bls.n	80009dc <HAL_RCC_OscConfig+0xd0>
 80009ec:	e7db      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80009ee:	4b6a      	ldr	r3, [pc, #424]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	f012 0f0c 	tst.w	r2, #12
 80009f6:	d010      	beq.n	8000a1a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80009fe:	2a08      	cmp	r2, #8
 8000a00:	d102      	bne.n	8000a08 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	025f      	lsls	r7, r3, #9
 8000a06:	d508      	bpl.n	8000a1a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a08:	4a63      	ldr	r2, [pc, #396]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
 8000a0a:	6893      	ldr	r3, [r2, #8]
 8000a0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000a10:	2b0c      	cmp	r3, #12
 8000a12:	d111      	bne.n	8000a38 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a14:	6853      	ldr	r3, [r2, #4]
 8000a16:	025e      	lsls	r6, r3, #9
 8000a18:	d40e      	bmi.n	8000a38 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a1a:	4b5f      	ldr	r3, [pc, #380]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	0795      	lsls	r5, r2, #30
 8000a20:	d502      	bpl.n	8000a28 <HAL_RCC_OscConfig+0x11c>
 8000a22:	68e2      	ldr	r2, [r4, #12]
 8000a24:	2a01      	cmp	r2, #1
 8000a26:	d1a6      	bne.n	8000976 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	6921      	ldr	r1, [r4, #16]
 8000a2c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a30:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a34:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a36:	e772      	b.n	800091e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a38:	68e2      	ldr	r2, [r4, #12]
 8000a3a:	4b58      	ldr	r3, [pc, #352]	; (8000b9c <HAL_RCC_OscConfig+0x290>)
 8000a3c:	b1b2      	cbz	r2, 8000a6c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a42:	f7ff fe07 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a46:	4d54      	ldr	r5, [pc, #336]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000a48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a4a:	682b      	ldr	r3, [r5, #0]
 8000a4c:	0798      	lsls	r0, r3, #30
 8000a4e:	d507      	bpl.n	8000a60 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	6922      	ldr	r2, [r4, #16]
 8000a54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a5c:	602b      	str	r3, [r5, #0]
 8000a5e:	e75e      	b.n	800091e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a60:	f7ff fdf8 	bl	8000654 <HAL_GetTick>
 8000a64:	1b80      	subs	r0, r0, r6
 8000a66:	2802      	cmp	r0, #2
 8000a68:	d9ef      	bls.n	8000a4a <HAL_RCC_OscConfig+0x13e>
 8000a6a:	e79c      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000a6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a6e:	f7ff fdf1 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a72:	4d49      	ldr	r5, [pc, #292]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000a74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a76:	682b      	ldr	r3, [r5, #0]
 8000a78:	0799      	lsls	r1, r3, #30
 8000a7a:	f57f af50 	bpl.w	800091e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a7e:	f7ff fde9 	bl	8000654 <HAL_GetTick>
 8000a82:	1b80      	subs	r0, r0, r6
 8000a84:	2802      	cmp	r0, #2
 8000a86:	d9f6      	bls.n	8000a76 <HAL_RCC_OscConfig+0x16a>
 8000a88:	e78d      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a8a:	6962      	ldr	r2, [r4, #20]
 8000a8c:	4b44      	ldr	r3, [pc, #272]	; (8000ba0 <HAL_RCC_OscConfig+0x294>)
 8000a8e:	b17a      	cbz	r2, 8000ab0 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a94:	f7ff fdde 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a98:	4d3f      	ldr	r5, [pc, #252]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000a9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a9c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a9e:	079f      	lsls	r7, r3, #30
 8000aa0:	f53f af41 	bmi.w	8000926 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa4:	f7ff fdd6 	bl	8000654 <HAL_GetTick>
 8000aa8:	1b80      	subs	r0, r0, r6
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d9f6      	bls.n	8000a9c <HAL_RCC_OscConfig+0x190>
 8000aae:	e77a      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000ab0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ab2:	f7ff fdcf 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab6:	4d38      	ldr	r5, [pc, #224]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000ab8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000abc:	0798      	lsls	r0, r3, #30
 8000abe:	f57f af32 	bpl.w	8000926 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ac2:	f7ff fdc7 	bl	8000654 <HAL_GetTick>
 8000ac6:	1b80      	subs	r0, r0, r6
 8000ac8:	2802      	cmp	r0, #2
 8000aca:	d9f6      	bls.n	8000aba <HAL_RCC_OscConfig+0x1ae>
 8000acc:	e76b      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
 8000ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ad6:	d128      	bne.n	8000b2a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	9201      	str	r2, [sp, #4]
 8000ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000adc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000aec:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aee:	4d2d      	ldr	r5, [pc, #180]	; (8000ba4 <HAL_RCC_OscConfig+0x298>)
 8000af0:	682b      	ldr	r3, [r5, #0]
 8000af2:	05d9      	lsls	r1, r3, #23
 8000af4:	d51b      	bpl.n	8000b2e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af6:	68a3      	ldr	r3, [r4, #8]
 8000af8:	4d27      	ldr	r5, [pc, #156]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d127      	bne.n	8000b4e <HAL_RCC_OscConfig+0x242>
 8000afe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b06:	f7ff fda5 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b0a:	4d23      	ldr	r5, [pc, #140]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000b0c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b0e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b12:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b14:	079b      	lsls	r3, r3, #30
 8000b16:	d539      	bpl.n	8000b8c <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000b18:	2e00      	cmp	r6, #0
 8000b1a:	f43f af08 	beq.w	800092e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <HAL_RCC_OscConfig+0x28c>)
 8000b20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	e701      	b.n	800092e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000b2a:	2600      	movs	r6, #0
 8000b2c:	e7df      	b.n	8000aee <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b2e:	682b      	ldr	r3, [r5, #0]
 8000b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b34:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b36:	f7ff fd8d 	bl	8000654 <HAL_GetTick>
 8000b3a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b3c:	682b      	ldr	r3, [r5, #0]
 8000b3e:	05da      	lsls	r2, r3, #23
 8000b40:	d4d9      	bmi.n	8000af6 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b42:	f7ff fd87 	bl	8000654 <HAL_GetTick>
 8000b46:	1bc0      	subs	r0, r0, r7
 8000b48:	2802      	cmp	r0, #2
 8000b4a:	d9f7      	bls.n	8000b3c <HAL_RCC_OscConfig+0x230>
 8000b4c:	e72b      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b4e:	2b05      	cmp	r3, #5
 8000b50:	d104      	bne.n	8000b5c <HAL_RCC_OscConfig+0x250>
 8000b52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	672b      	str	r3, [r5, #112]	; 0x70
 8000b5a:	e7d0      	b.n	8000afe <HAL_RCC_OscConfig+0x1f2>
 8000b5c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b5e:	f022 0201 	bic.w	r2, r2, #1
 8000b62:	672a      	str	r2, [r5, #112]	; 0x70
 8000b64:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b66:	f022 0204 	bic.w	r2, r2, #4
 8000b6a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1ca      	bne.n	8000b06 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8000b70:	f7ff fd70 	bl	8000654 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b74:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b78:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b7c:	0798      	lsls	r0, r3, #30
 8000b7e:	d5cb      	bpl.n	8000b18 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b80:	f7ff fd68 	bl	8000654 <HAL_GetTick>
 8000b84:	1bc0      	subs	r0, r0, r7
 8000b86:	4540      	cmp	r0, r8
 8000b88:	d9f7      	bls.n	8000b7a <HAL_RCC_OscConfig+0x26e>
 8000b8a:	e70c      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b8c:	f7ff fd62 	bl	8000654 <HAL_GetTick>
 8000b90:	1bc0      	subs	r0, r0, r7
 8000b92:	4540      	cmp	r0, r8
 8000b94:	d9bd      	bls.n	8000b12 <HAL_RCC_OscConfig+0x206>
 8000b96:	e706      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	42470000 	.word	0x42470000
 8000ba0:	42470e80 	.word	0x42470e80
 8000ba4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ba8:	4d23      	ldr	r5, [pc, #140]	; (8000c38 <HAL_RCC_OscConfig+0x32c>)
 8000baa:	68ab      	ldr	r3, [r5, #8]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	f43f aee0 	beq.w	8000976 <HAL_RCC_OscConfig+0x6a>
 8000bb6:	4e21      	ldr	r6, [pc, #132]	; (8000c3c <HAL_RCC_OscConfig+0x330>)
 8000bb8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bba:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000bbc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bbe:	d12d      	bne.n	8000c1c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fd48 	bl	8000654 <HAL_GetTick>
 8000bc4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	0199      	lsls	r1, r3, #6
 8000bca:	d421      	bmi.n	8000c10 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bcc:	6a22      	ldr	r2, [r4, #32]
 8000bce:	69e3      	ldr	r3, [r4, #28]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bd4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000bd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bde:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000be0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000be4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000be6:	4c14      	ldr	r4, [pc, #80]	; (8000c38 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000be8:	0852      	lsrs	r2, r2, #1
 8000bea:	3a01      	subs	r2, #1
 8000bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bf0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fd2d 	bl	8000654 <HAL_GetTick>
 8000bfa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	019a      	lsls	r2, r3, #6
 8000c00:	f53f ae99 	bmi.w	8000936 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c04:	f7ff fd26 	bl	8000654 <HAL_GetTick>
 8000c08:	1b40      	subs	r0, r0, r5
 8000c0a:	2802      	cmp	r0, #2
 8000c0c:	d9f6      	bls.n	8000bfc <HAL_RCC_OscConfig+0x2f0>
 8000c0e:	e6ca      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c10:	f7ff fd20 	bl	8000654 <HAL_GetTick>
 8000c14:	1bc0      	subs	r0, r0, r7
 8000c16:	2802      	cmp	r0, #2
 8000c18:	d9d5      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x2ba>
 8000c1a:	e6c4      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fd1a 	bl	8000654 <HAL_GetTick>
 8000c20:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c22:	682b      	ldr	r3, [r5, #0]
 8000c24:	019b      	lsls	r3, r3, #6
 8000c26:	f57f ae86 	bpl.w	8000936 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c2a:	f7ff fd13 	bl	8000654 <HAL_GetTick>
 8000c2e:	1b00      	subs	r0, r0, r4
 8000c30:	2802      	cmp	r0, #2
 8000c32:	d9f6      	bls.n	8000c22 <HAL_RCC_OscConfig+0x316>
 8000c34:	e6b7      	b.n	80009a6 <HAL_RCC_OscConfig+0x9a>
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	42470060 	.word	0x42470060

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b510      	push	{r4, lr}
 8000c42:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2200      	movs	r2, #0
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <SystemClock_Config+0x90>)
 8000c48:	9200      	str	r2, [sp, #0]
 8000c4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000c4c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000c50:	6419      	str	r1, [r3, #64]	; 0x40
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c54:	491f      	ldr	r1, [pc, #124]	; (8000cd4 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c5e:	9201      	str	r2, [sp, #4]
 8000c60:	680b      	ldr	r3, [r1, #0]
 8000c62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6a:	600b      	str	r3, [r1, #0]
 8000c6c:	680b      	ldr	r3, [r1, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c6e:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c80:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000c82:	2310      	movs	r3, #16
 8000c84:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c86:	f7ff fe41 	bl	800090c <HAL_RCC_OscConfig>
 8000c8a:	4601      	mov	r1, r0
 8000c8c:	b100      	cbz	r0, 8000c90 <SystemClock_Config+0x50>
 8000c8e:	e7fe      	b.n	8000c8e <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c92:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c96:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c98:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c9a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9c:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c9e:	f7ff fd4d 	bl	800073c <HAL_RCC_ClockConfig>
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	b100      	cbz	r0, 8000ca8 <SystemClock_Config+0x68>
 8000ca6:	e7fe      	b.n	8000ca6 <SystemClock_Config+0x66>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ca8:	f7ff fde2 	bl	8000870 <HAL_RCC_GetHCLKFreq>
 8000cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cb4:	f7ff fd1a 	bl	80006ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f7ff fd2d 	bl	8000718 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000cbe:	4622      	mov	r2, r4
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc6:	f7ff fcdd 	bl	8000684 <HAL_NVIC_SetPriority>
}
 8000cca:	b014      	add	sp, #80	; 0x50
 8000ccc:	bd10      	pop	{r4, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <init_SPI3>:
}

/* SPI3 init function */
void init_SPI3(void)
{
	RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8000cd8:	4a56      	ldr	r2, [pc, #344]	; (8000e34 <init_SPI3+0x15c>)
 8000cda:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000ce2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30


	GPIOC->MODER &=~ GPIO_MODER_MODE10_Msk;
 8000cea:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <init_SPI3+0x160>)
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8000cf2:	6019      	str	r1, [r3, #0]
	GPIOC->MODER &=~ GPIO_MODER_MODE11_Msk;
 8000cf4:	6819      	ldr	r1, [r3, #0]
 8000cf6:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8000cfa:	6019      	str	r1, [r3, #0]
	GPIOC->MODER &=~ GPIO_MODER_MODE12_Msk;
 8000cfc:	6819      	ldr	r1, [r3, #0]
 8000cfe:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8000d02:	6019      	str	r1, [r3, #0]
	GPIOC->MODER |= GPIO_MODER_MODE10_1;
 8000d04:	6819      	ldr	r1, [r3, #0]
 8000d06:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000d0a:	6019      	str	r1, [r3, #0]
	GPIOC->MODER |= GPIO_MODER_MODE11_1;
 8000d0c:	6819      	ldr	r1, [r3, #0]
 8000d0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d12:	6019      	str	r1, [r3, #0]
    GPIOC->MODER |= GPIO_MODER_MODE12_1;
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000d1a:	6019      	str	r1, [r3, #0]

    GPIOC->OTYPER &=~ GPIO_OTYPER_OT10_Msk;
 8000d1c:	6859      	ldr	r1, [r3, #4]
 8000d1e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000d22:	6059      	str	r1, [r3, #4]
	GPIOC->OTYPER &=~ GPIO_OTYPER_OT11_Msk;
 8000d24:	6859      	ldr	r1, [r3, #4]
 8000d26:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8000d2a:	6059      	str	r1, [r3, #4]
	GPIOC->OTYPER &=~ GPIO_OTYPER_OT12_Msk;
 8000d2c:	6859      	ldr	r1, [r3, #4]
 8000d2e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8000d32:	6059      	str	r1, [r3, #4]

	GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED12_Msk;
 8000d34:	6899      	ldr	r1, [r3, #8]
 8000d36:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
 8000d3a:	6099      	str	r1, [r3, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED11_Msk;
 8000d3c:	6899      	ldr	r1, [r3, #8]
 8000d3e:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 8000d42:	6099      	str	r1, [r3, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED10_Msk;
 8000d44:	6899      	ldr	r1, [r3, #8]
 8000d46:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8000d4a:	6099      	str	r1, [r3, #8]

	GPIOC->PUPDR &=~ GPIO_PUPDR_PUPD10_Msk;
 8000d4c:	68d9      	ldr	r1, [r3, #12]
 8000d4e:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8000d52:	60d9      	str	r1, [r3, #12]
	GPIOC->PUPDR &=~ GPIO_PUPDR_PUPD11_Msk;
 8000d54:	68d9      	ldr	r1, [r3, #12]
 8000d56:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8000d5a:	60d9      	str	r1, [r3, #12]
	GPIOC->PUPDR &=~ GPIO_PUPDR_PUPD12_Msk;
 8000d5c:	68d9      	ldr	r1, [r3, #12]
 8000d5e:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8000d62:	60d9      	str	r1, [r3, #12]


	GPIOC->IDR |= GPIO_IDR_ID12;
 8000d64:	6919      	ldr	r1, [r3, #16]
 8000d66:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000d6a:	6119      	str	r1, [r3, #16]
	GPIOC->IDR |= GPIO_IDR_ID11;
 8000d6c:	6919      	ldr	r1, [r3, #16]
 8000d6e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8000d72:	6119      	str	r1, [r3, #16]

	GPIOC->AFR[1] &=~  0xF << 8;
 8000d74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d76:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8000d7a:	f021 010f 	bic.w	r1, r1, #15
 8000d7e:	6259      	str	r1, [r3, #36]	; 0x24
	GPIOC->AFR[1] &=~  0xF << 12;
 8000d80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d82:	0c09      	lsrs	r1, r1, #16
 8000d84:	0409      	lsls	r1, r1, #16
 8000d86:	6259      	str	r1, [r3, #36]	; 0x24
	GPIOC->AFR[1] &=~  0xF << 16;
 8000d88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d8a:	0d09      	lsrs	r1, r1, #20
 8000d8c:	0509      	lsls	r1, r1, #20
 8000d8e:	6259      	str	r1, [r3, #36]	; 0x24

	GPIOC->AFR[1] |=  0b0110 << 8;
 8000d90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d92:	f441 61c0 	orr.w	r1, r1, #1536	; 0x600
 8000d96:	6259      	str	r1, [r3, #36]	; 0x24
	GPIOC->AFR[1] |=  0b0110 << 12;
 8000d98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d9a:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8000d9e:	6259      	str	r1, [r3, #36]	; 0x24
	GPIOC->AFR[1] |=  0b0110 << 16;
 8000da0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000da2:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
 8000da6:	6259      	str	r1, [r3, #36]	; 0x24

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000da8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &=~ GPIO_MODER_MODE15_Msk;
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <init_SPI3+0x164>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8000db8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODE15_1;
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000dc0:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &=~ GPIO_OTYPER_OT15_Msk;
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dc8:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED15_Msk;
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8000dd0:	609a      	str	r2, [r3, #8]
	GPIOA->PUPDR &=~ GPIO_PUPDR_PUPD15_Msk;
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8000dd8:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD15_0;
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000de0:	60da      	str	r2, [r3, #12]
	GPIOA->IDR |= GPIO_IDR_ID15;
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000de8:	611a      	str	r2, [r3, #16]

	GPIOA->AFR[1] &=~  0xF << 28;
 8000dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |=  0b0110 << 28;
 8000df0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000df2:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
 8000df6:	6259      	str	r1, [r3, #36]	; 0x24
	SPI3->CR2 |=  SPI_CR2_RXNEIE;
	SPI3->CR2 &=~ SPI_CR2_FRF ;
	SPI3->CR1 |= SPI_CR1_SSM;
	SPI3->CR1 |= SPI_CR1_SSI;
	*/
	SPI3->CR1 = 0;
 8000df8:	f5a3 33e2 	sub.w	r3, r3, #115712	; 0x1c400
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	2150      	movs	r1, #80	; 0x50
 8000dfe:	601a      	str	r2, [r3, #0]
	SPI3->CR2 = 0;
 8000e00:	605a      	str	r2, [r3, #4]

	SPI3->CR1 &=~ SPI_CR1_CPOL;
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	f022 0202 	bic.w	r2, r2, #2
 8000e08:	601a      	str	r2, [r3, #0]
	SPI3->CR1 |= SPI_CR1_CPHA;
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	f042 0201 	orr.w	r2, r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
	SPI3->CR1 |= SPI_CR1_DFF_Msk;
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e18:	601a      	str	r2, [r3, #0]
	SPI3->CR1 &=~ SPI_CR1_LSBFIRST;
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <init_SPI3+0x168>)
 8000e24:	f882 1333 	strb.w	r1, [r2, #819]	; 0x333

//	NVIC_EnableIRQ(SPI3_IRQn);
	NVIC_SetPriority(SPI3_IRQn,5);

	SPI3->CR1 |= SPI_CR1_SPE;
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020800 	.word	0x40020800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <main>:
{
 8000e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e48:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8000e4a:	f7ff fbdd 	bl	8000608 <HAL_Init>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2400      	movs	r4, #0
  SystemClock_Config();
 8000e50:	f7ff fef6 	bl	8000c40 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <main+0xbc>)
 8000e56:	9401      	str	r4, [sp, #4]
 8000e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	  while(!(SPI3->SR & SPI_SR_RXNE)){};
 8000e5a:	4d2a      	ldr	r5, [pc, #168]	; (8000f04 <main+0xc0>)
	  sprintf(str ,"uart_transmit    %i        \r\n              ", 	  data_input[0] );
 8000e5c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8000f08 <main+0xc4>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	f042 0201 	orr.w	r2, r2, #1
 8000e64:	631a      	str	r2, [r3, #48]	; 0x30
 8000e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e68:	f002 0201 	and.w	r2, r2, #1
 8000e6c:	9201      	str	r2, [sp, #4]
 8000e6e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e70:	9402      	str	r4, [sp, #8]
 8000e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e74:	f042 0204 	orr.w	r2, r2, #4
 8000e78:	631a      	str	r2, [r3, #48]	; 0x30
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	9302      	str	r3, [sp, #8]
 8000e82:	9b02      	ldr	r3, [sp, #8]
  init_SPI3();
 8000e84:	f7ff ff28 	bl	8000cd8 <init_SPI3>
 8000e88:	46a8      	mov	r8, r5
	  while(!(SPI3->SR & SPI_SR_RXNE)){};
 8000e8a:	68ab      	ldr	r3, [r5, #8]
 8000e8c:	07d9      	lsls	r1, r3, #31
 8000e8e:	d5fc      	bpl.n	8000e8a <main+0x46>
	  data_input[0] = SPI3->DR;
 8000e90:	68ef      	ldr	r7, [r5, #12]
	  sprintf(str ,"uart_transmit    %i        \r\n              ", 	  data_input[0] );
 8000e92:	b2bf      	uxth	r7, r7
 8000e94:	463a      	mov	r2, r7
 8000e96:	4649      	mov	r1, r9
 8000e98:	a803      	add	r0, sp, #12
 8000e9a:	f000 f903 	bl	80010a4 <siprintf>
	  while(!(SPI3->SR & SPI_SR_RXNE)){};
 8000e9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000ea2:	07da      	lsls	r2, r3, #31
 8000ea4:	d5fb      	bpl.n	8000e9e <main+0x5a>
	  data_input[1] = SPI3->DR;
 8000ea6:	f8d8 600c 	ldr.w	r6, [r8, #12]
	  sprintf(str ,"uart_transmit    %i        \r\n              ", 	  data_input[1] );
 8000eaa:	b2b6      	uxth	r6, r6
 8000eac:	4632      	mov	r2, r6
 8000eae:	4649      	mov	r1, r9
 8000eb0:	a803      	add	r0, sp, #12
 8000eb2:	f000 f8f7 	bl	80010a4 <siprintf>
	  while(!(SPI3->SR & SPI_SR_RXNE)){};
 8000eb6:	68ab      	ldr	r3, [r5, #8]
 8000eb8:	07db      	lsls	r3, r3, #31
 8000eba:	d5fc      	bpl.n	8000eb6 <main+0x72>
	  sprintf(str ,"uart_transmit    %i        \r\n              ", 	  data_input[1] );
 8000ebc:	4632      	mov	r2, r6
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	a803      	add	r0, sp, #12
	  data_input[2] = SPI3->DR;
 8000ec2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
	  sprintf(str ,"uart_transmit    %i        \r\n              ", 	  data_input[1] );
 8000ec6:	f000 f8ed 	bl	80010a4 <siprintf>
	  while(!(SPI3->SR & SPI_SR_TXE)){};
 8000eca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000ece:	0798      	lsls	r0, r3, #30
 8000ed0:	d5fb      	bpl.n	8000eca <main+0x86>
	  SPI3->DR = data_input[0] + num * 1000;
 8000ed2:	4427      	add	r7, r4
 8000ed4:	f8c8 700c 	str.w	r7, [r8, #12]
	  while(!(SPI3->SR & SPI_SR_TXE)){};
 8000ed8:	68ab      	ldr	r3, [r5, #8]
 8000eda:	0799      	lsls	r1, r3, #30
 8000edc:	d5fc      	bpl.n	8000ed8 <main+0x94>
	  SPI3->DR = data_input[1] + num * 1000;
 8000ede:	4426      	add	r6, r4
 8000ee0:	60ee      	str	r6, [r5, #12]
	  while(!(SPI3->SR & SPI_SR_TXE)){};
 8000ee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000ee6:	079a      	lsls	r2, r3, #30
 8000ee8:	d5fb      	bpl.n	8000ee2 <main+0x9e>
	  SPI3->DR = data_input[2] + num * 1000;
 8000eea:	fa14 f38a 	uxtah	r3, r4, sl
 8000eee:	f8c8 300c 	str.w	r3, [r8, #12]
	  while(!(SPI3->SR & SPI_SR_TXE)){};
 8000ef2:	68ab      	ldr	r3, [r5, #8]
 8000ef4:	079b      	lsls	r3, r3, #30
 8000ef6:	d5fc      	bpl.n	8000ef2 <main+0xae>
	  SPI3->DR = num * 1000;
 8000ef8:	60ec      	str	r4, [r5, #12]
 8000efa:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
	  while(!(SPI3->SR & SPI_SR_RXNE)){};
 8000efe:	e7c4      	b.n	8000e8a <main+0x46>
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40003c00 	.word	0x40003c00
 8000f08:	08001914 	.word	0x08001914

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <HAL_MspInit+0x8c>)
 8000f10:	2400      	movs	r4, #0
 8000f12:	9400      	str	r4, [sp, #0]
 8000f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f1e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	9401      	str	r4, [sp, #4]
 8000f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	f7ff fb90 	bl	8000660 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f40:	4622      	mov	r2, r4
 8000f42:	4621      	mov	r1, r4
 8000f44:	f06f 000b 	mvn.w	r0, #11
 8000f48:	f7ff fb9c 	bl	8000684 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f4c:	4622      	mov	r2, r4
 8000f4e:	4621      	mov	r1, r4
 8000f50:	f06f 000a 	mvn.w	r0, #10
 8000f54:	f7ff fb96 	bl	8000684 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f58:	4622      	mov	r2, r4
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	f06f 0009 	mvn.w	r0, #9
 8000f60:	f7ff fb90 	bl	8000684 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000f64:	4622      	mov	r2, r4
 8000f66:	4621      	mov	r1, r4
 8000f68:	f06f 0004 	mvn.w	r0, #4
 8000f6c:	f7ff fb8a 	bl	8000684 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000f70:	4622      	mov	r2, r4
 8000f72:	4621      	mov	r1, r4
 8000f74:	f06f 0003 	mvn.w	r0, #3
 8000f78:	f7ff fb84 	bl	8000684 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000f7c:	4622      	mov	r2, r4
 8000f7e:	4621      	mov	r1, r4
 8000f80:	f06f 0001 	mvn.w	r0, #1
 8000f84:	f7ff fb7e 	bl	8000684 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f88:	4622      	mov	r2, r4
 8000f8a:	4621      	mov	r1, r4
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff fb78 	bl	8000684 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f94:	b002      	add	sp, #8
 8000f96:	bd10      	pop	{r4, pc}
 8000f98:	40023800 	.word	0x40023800

08000f9c <NMI_Handler>:
 8000f9c:	4770      	bx	lr

08000f9e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler>

08000fa0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler>

08000fa2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler>

08000fa4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler>

08000fa6 <SVC_Handler>:
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000fac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fae:	f7ff fb45 	bl	800063c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000fb6:	f7ff bbbc 	b.w	8000732 <HAL_SYSTICK_IRQHandler>
	...

08000fbc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	490f      	ldr	r1, [pc, #60]	; (8000ffc <SystemInit+0x40>)
 8000fbe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000fc2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <SystemInit+0x44>)
 8000fcc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fce:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000fd0:	f042 0201 	orr.w	r2, r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000fd6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000fde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fe2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <SystemInit+0x48>)
 8000fe6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fee:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ff0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ff6:	608b      	str	r3, [r1, #8]
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	40023800 	.word	0x40023800
 8001004:	24003010 	.word	0x24003010

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800100c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800100e:	e003      	b.n	8001018 <LoopCopyDataInit>

08001010 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001012:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001014:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001016:	3104      	adds	r1, #4

08001018 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800101c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800101e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001020:	d3f6      	bcc.n	8001010 <CopyDataInit>
  ldr  r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001024:	e002      	b.n	800102c <LoopFillZerobss>

08001026 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001026:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001028:	f842 3b04 	str.w	r3, [r2], #4

0800102c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800102e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001030:	d3f9      	bcc.n	8001026 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001032:	f7ff ffc3 	bl	8000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f000 f811 	bl	800105c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff ff03 	bl	8000e44 <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001044:	08001994 	.word	0x08001994
  ldr  r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800104c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001050:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001054:	200000a0 	.word	0x200000a0

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>
	...

0800105c <__libc_init_array>:
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	4e0d      	ldr	r6, [pc, #52]	; (8001094 <__libc_init_array+0x38>)
 8001060:	4c0d      	ldr	r4, [pc, #52]	; (8001098 <__libc_init_array+0x3c>)
 8001062:	1ba4      	subs	r4, r4, r6
 8001064:	10a4      	asrs	r4, r4, #2
 8001066:	2500      	movs	r5, #0
 8001068:	42a5      	cmp	r5, r4
 800106a:	d109      	bne.n	8001080 <__libc_init_array+0x24>
 800106c:	4e0b      	ldr	r6, [pc, #44]	; (800109c <__libc_init_array+0x40>)
 800106e:	4c0c      	ldr	r4, [pc, #48]	; (80010a0 <__libc_init_array+0x44>)
 8001070:	f000 fc44 	bl	80018fc <_init>
 8001074:	1ba4      	subs	r4, r4, r6
 8001076:	10a4      	asrs	r4, r4, #2
 8001078:	2500      	movs	r5, #0
 800107a:	42a5      	cmp	r5, r4
 800107c:	d105      	bne.n	800108a <__libc_init_array+0x2e>
 800107e:	bd70      	pop	{r4, r5, r6, pc}
 8001080:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001084:	4798      	blx	r3
 8001086:	3501      	adds	r5, #1
 8001088:	e7ee      	b.n	8001068 <__libc_init_array+0xc>
 800108a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800108e:	4798      	blx	r3
 8001090:	3501      	adds	r5, #1
 8001092:	e7f2      	b.n	800107a <__libc_init_array+0x1e>
 8001094:	0800198c 	.word	0x0800198c
 8001098:	0800198c 	.word	0x0800198c
 800109c:	0800198c 	.word	0x0800198c
 80010a0:	08001990 	.word	0x08001990

080010a4 <siprintf>:
 80010a4:	b40e      	push	{r1, r2, r3}
 80010a6:	b500      	push	{lr}
 80010a8:	b09c      	sub	sp, #112	; 0x70
 80010aa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80010ae:	ab1d      	add	r3, sp, #116	; 0x74
 80010b0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80010b4:	9002      	str	r0, [sp, #8]
 80010b6:	9006      	str	r0, [sp, #24]
 80010b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80010bc:	480a      	ldr	r0, [pc, #40]	; (80010e8 <siprintf+0x44>)
 80010be:	9104      	str	r1, [sp, #16]
 80010c0:	9107      	str	r1, [sp, #28]
 80010c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80010ca:	f8ad 1016 	strh.w	r1, [sp, #22]
 80010ce:	6800      	ldr	r0, [r0, #0]
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	a902      	add	r1, sp, #8
 80010d4:	f000 f866 	bl	80011a4 <_svfiprintf_r>
 80010d8:	9b02      	ldr	r3, [sp, #8]
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	b01c      	add	sp, #112	; 0x70
 80010e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80010e4:	b003      	add	sp, #12
 80010e6:	4770      	bx	lr
 80010e8:	2000000c 	.word	0x2000000c

080010ec <__ssputs_r>:
 80010ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f0:	688e      	ldr	r6, [r1, #8]
 80010f2:	429e      	cmp	r6, r3
 80010f4:	4682      	mov	sl, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	4691      	mov	r9, r2
 80010fa:	4698      	mov	r8, r3
 80010fc:	d835      	bhi.n	800116a <__ssputs_r+0x7e>
 80010fe:	898a      	ldrh	r2, [r1, #12]
 8001100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001104:	d031      	beq.n	800116a <__ssputs_r+0x7e>
 8001106:	6825      	ldr	r5, [r4, #0]
 8001108:	6909      	ldr	r1, [r1, #16]
 800110a:	1a6f      	subs	r7, r5, r1
 800110c:	6965      	ldr	r5, [r4, #20]
 800110e:	2302      	movs	r3, #2
 8001110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001114:	fb95 f5f3 	sdiv	r5, r5, r3
 8001118:	f108 0301 	add.w	r3, r8, #1
 800111c:	443b      	add	r3, r7
 800111e:	429d      	cmp	r5, r3
 8001120:	bf38      	it	cc
 8001122:	461d      	movcc	r5, r3
 8001124:	0553      	lsls	r3, r2, #21
 8001126:	d531      	bpl.n	800118c <__ssputs_r+0xa0>
 8001128:	4629      	mov	r1, r5
 800112a:	f000 fb39 	bl	80017a0 <_malloc_r>
 800112e:	4606      	mov	r6, r0
 8001130:	b950      	cbnz	r0, 8001148 <__ssputs_r+0x5c>
 8001132:	230c      	movs	r3, #12
 8001134:	f8ca 3000 	str.w	r3, [sl]
 8001138:	89a3      	ldrh	r3, [r4, #12]
 800113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113e:	81a3      	strh	r3, [r4, #12]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001148:	463a      	mov	r2, r7
 800114a:	6921      	ldr	r1, [r4, #16]
 800114c:	f000 fab4 	bl	80016b8 <memcpy>
 8001150:	89a3      	ldrh	r3, [r4, #12]
 8001152:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115a:	81a3      	strh	r3, [r4, #12]
 800115c:	6126      	str	r6, [r4, #16]
 800115e:	6165      	str	r5, [r4, #20]
 8001160:	443e      	add	r6, r7
 8001162:	1bed      	subs	r5, r5, r7
 8001164:	6026      	str	r6, [r4, #0]
 8001166:	60a5      	str	r5, [r4, #8]
 8001168:	4646      	mov	r6, r8
 800116a:	4546      	cmp	r6, r8
 800116c:	bf28      	it	cs
 800116e:	4646      	movcs	r6, r8
 8001170:	4632      	mov	r2, r6
 8001172:	4649      	mov	r1, r9
 8001174:	6820      	ldr	r0, [r4, #0]
 8001176:	f000 faaa 	bl	80016ce <memmove>
 800117a:	68a3      	ldr	r3, [r4, #8]
 800117c:	1b9b      	subs	r3, r3, r6
 800117e:	60a3      	str	r3, [r4, #8]
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	441e      	add	r6, r3
 8001184:	6026      	str	r6, [r4, #0]
 8001186:	2000      	movs	r0, #0
 8001188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118c:	462a      	mov	r2, r5
 800118e:	f000 fb65 	bl	800185c <_realloc_r>
 8001192:	4606      	mov	r6, r0
 8001194:	2800      	cmp	r0, #0
 8001196:	d1e1      	bne.n	800115c <__ssputs_r+0x70>
 8001198:	6921      	ldr	r1, [r4, #16]
 800119a:	4650      	mov	r0, sl
 800119c:	f000 fab2 	bl	8001704 <_free_r>
 80011a0:	e7c7      	b.n	8001132 <__ssputs_r+0x46>
	...

080011a4 <_svfiprintf_r>:
 80011a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011a8:	b09d      	sub	sp, #116	; 0x74
 80011aa:	4680      	mov	r8, r0
 80011ac:	9303      	str	r3, [sp, #12]
 80011ae:	898b      	ldrh	r3, [r1, #12]
 80011b0:	061c      	lsls	r4, r3, #24
 80011b2:	460d      	mov	r5, r1
 80011b4:	4616      	mov	r6, r2
 80011b6:	d50f      	bpl.n	80011d8 <_svfiprintf_r+0x34>
 80011b8:	690b      	ldr	r3, [r1, #16]
 80011ba:	b96b      	cbnz	r3, 80011d8 <_svfiprintf_r+0x34>
 80011bc:	2140      	movs	r1, #64	; 0x40
 80011be:	f000 faef 	bl	80017a0 <_malloc_r>
 80011c2:	6028      	str	r0, [r5, #0]
 80011c4:	6128      	str	r0, [r5, #16]
 80011c6:	b928      	cbnz	r0, 80011d4 <_svfiprintf_r+0x30>
 80011c8:	230c      	movs	r3, #12
 80011ca:	f8c8 3000 	str.w	r3, [r8]
 80011ce:	f04f 30ff 	mov.w	r0, #4294967295
 80011d2:	e0c5      	b.n	8001360 <_svfiprintf_r+0x1bc>
 80011d4:	2340      	movs	r3, #64	; 0x40
 80011d6:	616b      	str	r3, [r5, #20]
 80011d8:	2300      	movs	r3, #0
 80011da:	9309      	str	r3, [sp, #36]	; 0x24
 80011dc:	2320      	movs	r3, #32
 80011de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80011e2:	2330      	movs	r3, #48	; 0x30
 80011e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80011e8:	f04f 0b01 	mov.w	fp, #1
 80011ec:	4637      	mov	r7, r6
 80011ee:	463c      	mov	r4, r7
 80011f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d13c      	bne.n	8001272 <_svfiprintf_r+0xce>
 80011f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80011fc:	d00b      	beq.n	8001216 <_svfiprintf_r+0x72>
 80011fe:	4653      	mov	r3, sl
 8001200:	4632      	mov	r2, r6
 8001202:	4629      	mov	r1, r5
 8001204:	4640      	mov	r0, r8
 8001206:	f7ff ff71 	bl	80010ec <__ssputs_r>
 800120a:	3001      	adds	r0, #1
 800120c:	f000 80a3 	beq.w	8001356 <_svfiprintf_r+0x1b2>
 8001210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001212:	4453      	add	r3, sl
 8001214:	9309      	str	r3, [sp, #36]	; 0x24
 8001216:	783b      	ldrb	r3, [r7, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 809c 	beq.w	8001356 <_svfiprintf_r+0x1b2>
 800121e:	2300      	movs	r3, #0
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	9304      	str	r3, [sp, #16]
 8001226:	9307      	str	r3, [sp, #28]
 8001228:	9205      	str	r2, [sp, #20]
 800122a:	9306      	str	r3, [sp, #24]
 800122c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001230:	931a      	str	r3, [sp, #104]	; 0x68
 8001232:	2205      	movs	r2, #5
 8001234:	7821      	ldrb	r1, [r4, #0]
 8001236:	4850      	ldr	r0, [pc, #320]	; (8001378 <_svfiprintf_r+0x1d4>)
 8001238:	f7fe ffea 	bl	8000210 <memchr>
 800123c:	1c67      	adds	r7, r4, #1
 800123e:	9b04      	ldr	r3, [sp, #16]
 8001240:	b9d8      	cbnz	r0, 800127a <_svfiprintf_r+0xd6>
 8001242:	06d9      	lsls	r1, r3, #27
 8001244:	bf44      	itt	mi
 8001246:	2220      	movmi	r2, #32
 8001248:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800124c:	071a      	lsls	r2, r3, #28
 800124e:	bf44      	itt	mi
 8001250:	222b      	movmi	r2, #43	; 0x2b
 8001252:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001256:	7822      	ldrb	r2, [r4, #0]
 8001258:	2a2a      	cmp	r2, #42	; 0x2a
 800125a:	d016      	beq.n	800128a <_svfiprintf_r+0xe6>
 800125c:	9a07      	ldr	r2, [sp, #28]
 800125e:	2100      	movs	r1, #0
 8001260:	200a      	movs	r0, #10
 8001262:	4627      	mov	r7, r4
 8001264:	3401      	adds	r4, #1
 8001266:	783b      	ldrb	r3, [r7, #0]
 8001268:	3b30      	subs	r3, #48	; 0x30
 800126a:	2b09      	cmp	r3, #9
 800126c:	d951      	bls.n	8001312 <_svfiprintf_r+0x16e>
 800126e:	b1c9      	cbz	r1, 80012a4 <_svfiprintf_r+0x100>
 8001270:	e011      	b.n	8001296 <_svfiprintf_r+0xf2>
 8001272:	2b25      	cmp	r3, #37	; 0x25
 8001274:	d0c0      	beq.n	80011f8 <_svfiprintf_r+0x54>
 8001276:	4627      	mov	r7, r4
 8001278:	e7b9      	b.n	80011ee <_svfiprintf_r+0x4a>
 800127a:	4a3f      	ldr	r2, [pc, #252]	; (8001378 <_svfiprintf_r+0x1d4>)
 800127c:	1a80      	subs	r0, r0, r2
 800127e:	fa0b f000 	lsl.w	r0, fp, r0
 8001282:	4318      	orrs	r0, r3
 8001284:	9004      	str	r0, [sp, #16]
 8001286:	463c      	mov	r4, r7
 8001288:	e7d3      	b.n	8001232 <_svfiprintf_r+0x8e>
 800128a:	9a03      	ldr	r2, [sp, #12]
 800128c:	1d11      	adds	r1, r2, #4
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	9103      	str	r1, [sp, #12]
 8001292:	2a00      	cmp	r2, #0
 8001294:	db01      	blt.n	800129a <_svfiprintf_r+0xf6>
 8001296:	9207      	str	r2, [sp, #28]
 8001298:	e004      	b.n	80012a4 <_svfiprintf_r+0x100>
 800129a:	4252      	negs	r2, r2
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	9207      	str	r2, [sp, #28]
 80012a2:	9304      	str	r3, [sp, #16]
 80012a4:	783b      	ldrb	r3, [r7, #0]
 80012a6:	2b2e      	cmp	r3, #46	; 0x2e
 80012a8:	d10e      	bne.n	80012c8 <_svfiprintf_r+0x124>
 80012aa:	787b      	ldrb	r3, [r7, #1]
 80012ac:	2b2a      	cmp	r3, #42	; 0x2a
 80012ae:	f107 0101 	add.w	r1, r7, #1
 80012b2:	d132      	bne.n	800131a <_svfiprintf_r+0x176>
 80012b4:	9b03      	ldr	r3, [sp, #12]
 80012b6:	1d1a      	adds	r2, r3, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	9203      	str	r2, [sp, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bfb8      	it	lt
 80012c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80012c4:	3702      	adds	r7, #2
 80012c6:	9305      	str	r3, [sp, #20]
 80012c8:	4c2c      	ldr	r4, [pc, #176]	; (800137c <_svfiprintf_r+0x1d8>)
 80012ca:	7839      	ldrb	r1, [r7, #0]
 80012cc:	2203      	movs	r2, #3
 80012ce:	4620      	mov	r0, r4
 80012d0:	f7fe ff9e 	bl	8000210 <memchr>
 80012d4:	b138      	cbz	r0, 80012e6 <_svfiprintf_r+0x142>
 80012d6:	2340      	movs	r3, #64	; 0x40
 80012d8:	1b00      	subs	r0, r0, r4
 80012da:	fa03 f000 	lsl.w	r0, r3, r0
 80012de:	9b04      	ldr	r3, [sp, #16]
 80012e0:	4303      	orrs	r3, r0
 80012e2:	9304      	str	r3, [sp, #16]
 80012e4:	3701      	adds	r7, #1
 80012e6:	7839      	ldrb	r1, [r7, #0]
 80012e8:	4825      	ldr	r0, [pc, #148]	; (8001380 <_svfiprintf_r+0x1dc>)
 80012ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80012ee:	2206      	movs	r2, #6
 80012f0:	1c7e      	adds	r6, r7, #1
 80012f2:	f7fe ff8d 	bl	8000210 <memchr>
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d035      	beq.n	8001366 <_svfiprintf_r+0x1c2>
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <_svfiprintf_r+0x1e0>)
 80012fc:	b9fb      	cbnz	r3, 800133e <_svfiprintf_r+0x19a>
 80012fe:	9b03      	ldr	r3, [sp, #12]
 8001300:	3307      	adds	r3, #7
 8001302:	f023 0307 	bic.w	r3, r3, #7
 8001306:	3308      	adds	r3, #8
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800130c:	444b      	add	r3, r9
 800130e:	9309      	str	r3, [sp, #36]	; 0x24
 8001310:	e76c      	b.n	80011ec <_svfiprintf_r+0x48>
 8001312:	fb00 3202 	mla	r2, r0, r2, r3
 8001316:	2101      	movs	r1, #1
 8001318:	e7a3      	b.n	8001262 <_svfiprintf_r+0xbe>
 800131a:	2300      	movs	r3, #0
 800131c:	9305      	str	r3, [sp, #20]
 800131e:	4618      	mov	r0, r3
 8001320:	240a      	movs	r4, #10
 8001322:	460f      	mov	r7, r1
 8001324:	3101      	adds	r1, #1
 8001326:	783a      	ldrb	r2, [r7, #0]
 8001328:	3a30      	subs	r2, #48	; 0x30
 800132a:	2a09      	cmp	r2, #9
 800132c:	d903      	bls.n	8001336 <_svfiprintf_r+0x192>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0ca      	beq.n	80012c8 <_svfiprintf_r+0x124>
 8001332:	9005      	str	r0, [sp, #20]
 8001334:	e7c8      	b.n	80012c8 <_svfiprintf_r+0x124>
 8001336:	fb04 2000 	mla	r0, r4, r0, r2
 800133a:	2301      	movs	r3, #1
 800133c:	e7f1      	b.n	8001322 <_svfiprintf_r+0x17e>
 800133e:	ab03      	add	r3, sp, #12
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	462a      	mov	r2, r5
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_svfiprintf_r+0x1e4>)
 8001346:	a904      	add	r1, sp, #16
 8001348:	4640      	mov	r0, r8
 800134a:	f3af 8000 	nop.w
 800134e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001352:	4681      	mov	r9, r0
 8001354:	d1d9      	bne.n	800130a <_svfiprintf_r+0x166>
 8001356:	89ab      	ldrh	r3, [r5, #12]
 8001358:	065b      	lsls	r3, r3, #25
 800135a:	f53f af38 	bmi.w	80011ce <_svfiprintf_r+0x2a>
 800135e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001360:	b01d      	add	sp, #116	; 0x74
 8001362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001366:	ab03      	add	r3, sp, #12
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	462a      	mov	r2, r5
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <_svfiprintf_r+0x1e4>)
 800136e:	a904      	add	r1, sp, #16
 8001370:	4640      	mov	r0, r8
 8001372:	f000 f881 	bl	8001478 <_printf_i>
 8001376:	e7ea      	b.n	800134e <_svfiprintf_r+0x1aa>
 8001378:	08001950 	.word	0x08001950
 800137c:	08001956 	.word	0x08001956
 8001380:	0800195a 	.word	0x0800195a
 8001384:	00000000 	.word	0x00000000
 8001388:	080010ed 	.word	0x080010ed

0800138c <_printf_common>:
 800138c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001390:	4691      	mov	r9, r2
 8001392:	461f      	mov	r7, r3
 8001394:	688a      	ldr	r2, [r1, #8]
 8001396:	690b      	ldr	r3, [r1, #16]
 8001398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800139c:	4293      	cmp	r3, r2
 800139e:	bfb8      	it	lt
 80013a0:	4613      	movlt	r3, r2
 80013a2:	f8c9 3000 	str.w	r3, [r9]
 80013a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80013aa:	4606      	mov	r6, r0
 80013ac:	460c      	mov	r4, r1
 80013ae:	b112      	cbz	r2, 80013b6 <_printf_common+0x2a>
 80013b0:	3301      	adds	r3, #1
 80013b2:	f8c9 3000 	str.w	r3, [r9]
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	0699      	lsls	r1, r3, #26
 80013ba:	bf42      	ittt	mi
 80013bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80013c0:	3302      	addmi	r3, #2
 80013c2:	f8c9 3000 	strmi.w	r3, [r9]
 80013c6:	6825      	ldr	r5, [r4, #0]
 80013c8:	f015 0506 	ands.w	r5, r5, #6
 80013cc:	d107      	bne.n	80013de <_printf_common+0x52>
 80013ce:	f104 0a19 	add.w	sl, r4, #25
 80013d2:	68e3      	ldr	r3, [r4, #12]
 80013d4:	f8d9 2000 	ldr.w	r2, [r9]
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	429d      	cmp	r5, r3
 80013dc:	db29      	blt.n	8001432 <_printf_common+0xa6>
 80013de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80013e2:	6822      	ldr	r2, [r4, #0]
 80013e4:	3300      	adds	r3, #0
 80013e6:	bf18      	it	ne
 80013e8:	2301      	movne	r3, #1
 80013ea:	0692      	lsls	r2, r2, #26
 80013ec:	d42e      	bmi.n	800144c <_printf_common+0xc0>
 80013ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013f2:	4639      	mov	r1, r7
 80013f4:	4630      	mov	r0, r6
 80013f6:	47c0      	blx	r8
 80013f8:	3001      	adds	r0, #1
 80013fa:	d021      	beq.n	8001440 <_printf_common+0xb4>
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	68e5      	ldr	r5, [r4, #12]
 8001400:	f8d9 2000 	ldr.w	r2, [r9]
 8001404:	f003 0306 	and.w	r3, r3, #6
 8001408:	2b04      	cmp	r3, #4
 800140a:	bf08      	it	eq
 800140c:	1aad      	subeq	r5, r5, r2
 800140e:	68a3      	ldr	r3, [r4, #8]
 8001410:	6922      	ldr	r2, [r4, #16]
 8001412:	bf0c      	ite	eq
 8001414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001418:	2500      	movne	r5, #0
 800141a:	4293      	cmp	r3, r2
 800141c:	bfc4      	itt	gt
 800141e:	1a9b      	subgt	r3, r3, r2
 8001420:	18ed      	addgt	r5, r5, r3
 8001422:	f04f 0900 	mov.w	r9, #0
 8001426:	341a      	adds	r4, #26
 8001428:	454d      	cmp	r5, r9
 800142a:	d11b      	bne.n	8001464 <_printf_common+0xd8>
 800142c:	2000      	movs	r0, #0
 800142e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001432:	2301      	movs	r3, #1
 8001434:	4652      	mov	r2, sl
 8001436:	4639      	mov	r1, r7
 8001438:	4630      	mov	r0, r6
 800143a:	47c0      	blx	r8
 800143c:	3001      	adds	r0, #1
 800143e:	d103      	bne.n	8001448 <_printf_common+0xbc>
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001448:	3501      	adds	r5, #1
 800144a:	e7c2      	b.n	80013d2 <_printf_common+0x46>
 800144c:	18e1      	adds	r1, r4, r3
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	2030      	movs	r0, #48	; 0x30
 8001452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001456:	4422      	add	r2, r4
 8001458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800145c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001460:	3302      	adds	r3, #2
 8001462:	e7c4      	b.n	80013ee <_printf_common+0x62>
 8001464:	2301      	movs	r3, #1
 8001466:	4622      	mov	r2, r4
 8001468:	4639      	mov	r1, r7
 800146a:	4630      	mov	r0, r6
 800146c:	47c0      	blx	r8
 800146e:	3001      	adds	r0, #1
 8001470:	d0e6      	beq.n	8001440 <_printf_common+0xb4>
 8001472:	f109 0901 	add.w	r9, r9, #1
 8001476:	e7d7      	b.n	8001428 <_printf_common+0x9c>

08001478 <_printf_i>:
 8001478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800147c:	4617      	mov	r7, r2
 800147e:	7e0a      	ldrb	r2, [r1, #24]
 8001480:	b085      	sub	sp, #20
 8001482:	2a6e      	cmp	r2, #110	; 0x6e
 8001484:	4698      	mov	r8, r3
 8001486:	4606      	mov	r6, r0
 8001488:	460c      	mov	r4, r1
 800148a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800148c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001490:	f000 80bc 	beq.w	800160c <_printf_i+0x194>
 8001494:	d81a      	bhi.n	80014cc <_printf_i+0x54>
 8001496:	2a63      	cmp	r2, #99	; 0x63
 8001498:	d02e      	beq.n	80014f8 <_printf_i+0x80>
 800149a:	d80a      	bhi.n	80014b2 <_printf_i+0x3a>
 800149c:	2a00      	cmp	r2, #0
 800149e:	f000 80c8 	beq.w	8001632 <_printf_i+0x1ba>
 80014a2:	2a58      	cmp	r2, #88	; 0x58
 80014a4:	f000 808a 	beq.w	80015bc <_printf_i+0x144>
 80014a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80014b0:	e02a      	b.n	8001508 <_printf_i+0x90>
 80014b2:	2a64      	cmp	r2, #100	; 0x64
 80014b4:	d001      	beq.n	80014ba <_printf_i+0x42>
 80014b6:	2a69      	cmp	r2, #105	; 0x69
 80014b8:	d1f6      	bne.n	80014a8 <_printf_i+0x30>
 80014ba:	6821      	ldr	r1, [r4, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80014c2:	d023      	beq.n	800150c <_printf_i+0x94>
 80014c4:	1d11      	adds	r1, r2, #4
 80014c6:	6019      	str	r1, [r3, #0]
 80014c8:	6813      	ldr	r3, [r2, #0]
 80014ca:	e027      	b.n	800151c <_printf_i+0xa4>
 80014cc:	2a73      	cmp	r2, #115	; 0x73
 80014ce:	f000 80b4 	beq.w	800163a <_printf_i+0x1c2>
 80014d2:	d808      	bhi.n	80014e6 <_printf_i+0x6e>
 80014d4:	2a6f      	cmp	r2, #111	; 0x6f
 80014d6:	d02a      	beq.n	800152e <_printf_i+0xb6>
 80014d8:	2a70      	cmp	r2, #112	; 0x70
 80014da:	d1e5      	bne.n	80014a8 <_printf_i+0x30>
 80014dc:	680a      	ldr	r2, [r1, #0]
 80014de:	f042 0220 	orr.w	r2, r2, #32
 80014e2:	600a      	str	r2, [r1, #0]
 80014e4:	e003      	b.n	80014ee <_printf_i+0x76>
 80014e6:	2a75      	cmp	r2, #117	; 0x75
 80014e8:	d021      	beq.n	800152e <_printf_i+0xb6>
 80014ea:	2a78      	cmp	r2, #120	; 0x78
 80014ec:	d1dc      	bne.n	80014a8 <_printf_i+0x30>
 80014ee:	2278      	movs	r2, #120	; 0x78
 80014f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80014f4:	496e      	ldr	r1, [pc, #440]	; (80016b0 <_printf_i+0x238>)
 80014f6:	e064      	b.n	80015c2 <_printf_i+0x14a>
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80014fe:	1d11      	adds	r1, r2, #4
 8001500:	6019      	str	r1, [r3, #0]
 8001502:	6813      	ldr	r3, [r2, #0]
 8001504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001508:	2301      	movs	r3, #1
 800150a:	e0a3      	b.n	8001654 <_printf_i+0x1dc>
 800150c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001510:	f102 0104 	add.w	r1, r2, #4
 8001514:	6019      	str	r1, [r3, #0]
 8001516:	d0d7      	beq.n	80014c8 <_printf_i+0x50>
 8001518:	f9b2 3000 	ldrsh.w	r3, [r2]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da03      	bge.n	8001528 <_printf_i+0xb0>
 8001520:	222d      	movs	r2, #45	; 0x2d
 8001522:	425b      	negs	r3, r3
 8001524:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001528:	4962      	ldr	r1, [pc, #392]	; (80016b4 <_printf_i+0x23c>)
 800152a:	220a      	movs	r2, #10
 800152c:	e017      	b.n	800155e <_printf_i+0xe6>
 800152e:	6820      	ldr	r0, [r4, #0]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001536:	d003      	beq.n	8001540 <_printf_i+0xc8>
 8001538:	1d08      	adds	r0, r1, #4
 800153a:	6018      	str	r0, [r3, #0]
 800153c:	680b      	ldr	r3, [r1, #0]
 800153e:	e006      	b.n	800154e <_printf_i+0xd6>
 8001540:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001544:	f101 0004 	add.w	r0, r1, #4
 8001548:	6018      	str	r0, [r3, #0]
 800154a:	d0f7      	beq.n	800153c <_printf_i+0xc4>
 800154c:	880b      	ldrh	r3, [r1, #0]
 800154e:	4959      	ldr	r1, [pc, #356]	; (80016b4 <_printf_i+0x23c>)
 8001550:	2a6f      	cmp	r2, #111	; 0x6f
 8001552:	bf14      	ite	ne
 8001554:	220a      	movne	r2, #10
 8001556:	2208      	moveq	r2, #8
 8001558:	2000      	movs	r0, #0
 800155a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800155e:	6865      	ldr	r5, [r4, #4]
 8001560:	60a5      	str	r5, [r4, #8]
 8001562:	2d00      	cmp	r5, #0
 8001564:	f2c0 809c 	blt.w	80016a0 <_printf_i+0x228>
 8001568:	6820      	ldr	r0, [r4, #0]
 800156a:	f020 0004 	bic.w	r0, r0, #4
 800156e:	6020      	str	r0, [r4, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d13f      	bne.n	80015f4 <_printf_i+0x17c>
 8001574:	2d00      	cmp	r5, #0
 8001576:	f040 8095 	bne.w	80016a4 <_printf_i+0x22c>
 800157a:	4675      	mov	r5, lr
 800157c:	2a08      	cmp	r2, #8
 800157e:	d10b      	bne.n	8001598 <_printf_i+0x120>
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	07da      	lsls	r2, r3, #31
 8001584:	d508      	bpl.n	8001598 <_printf_i+0x120>
 8001586:	6923      	ldr	r3, [r4, #16]
 8001588:	6862      	ldr	r2, [r4, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	bfde      	ittt	le
 800158e:	2330      	movle	r3, #48	; 0x30
 8001590:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001594:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001598:	ebae 0305 	sub.w	r3, lr, r5
 800159c:	6123      	str	r3, [r4, #16]
 800159e:	f8cd 8000 	str.w	r8, [sp]
 80015a2:	463b      	mov	r3, r7
 80015a4:	aa03      	add	r2, sp, #12
 80015a6:	4621      	mov	r1, r4
 80015a8:	4630      	mov	r0, r6
 80015aa:	f7ff feef 	bl	800138c <_printf_common>
 80015ae:	3001      	adds	r0, #1
 80015b0:	d155      	bne.n	800165e <_printf_i+0x1e6>
 80015b2:	f04f 30ff 	mov.w	r0, #4294967295
 80015b6:	b005      	add	sp, #20
 80015b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80015c0:	493c      	ldr	r1, [pc, #240]	; (80016b4 <_printf_i+0x23c>)
 80015c2:	6822      	ldr	r2, [r4, #0]
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80015ca:	f100 0504 	add.w	r5, r0, #4
 80015ce:	601d      	str	r5, [r3, #0]
 80015d0:	d001      	beq.n	80015d6 <_printf_i+0x15e>
 80015d2:	6803      	ldr	r3, [r0, #0]
 80015d4:	e002      	b.n	80015dc <_printf_i+0x164>
 80015d6:	0655      	lsls	r5, r2, #25
 80015d8:	d5fb      	bpl.n	80015d2 <_printf_i+0x15a>
 80015da:	8803      	ldrh	r3, [r0, #0]
 80015dc:	07d0      	lsls	r0, r2, #31
 80015de:	bf44      	itt	mi
 80015e0:	f042 0220 	orrmi.w	r2, r2, #32
 80015e4:	6022      	strmi	r2, [r4, #0]
 80015e6:	b91b      	cbnz	r3, 80015f0 <_printf_i+0x178>
 80015e8:	6822      	ldr	r2, [r4, #0]
 80015ea:	f022 0220 	bic.w	r2, r2, #32
 80015ee:	6022      	str	r2, [r4, #0]
 80015f0:	2210      	movs	r2, #16
 80015f2:	e7b1      	b.n	8001558 <_printf_i+0xe0>
 80015f4:	4675      	mov	r5, lr
 80015f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80015fa:	fb02 3310 	mls	r3, r2, r0, r3
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001604:	4603      	mov	r3, r0
 8001606:	2800      	cmp	r0, #0
 8001608:	d1f5      	bne.n	80015f6 <_printf_i+0x17e>
 800160a:	e7b7      	b.n	800157c <_printf_i+0x104>
 800160c:	6808      	ldr	r0, [r1, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	6949      	ldr	r1, [r1, #20]
 8001612:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001616:	d004      	beq.n	8001622 <_printf_i+0x1aa>
 8001618:	1d10      	adds	r0, r2, #4
 800161a:	6018      	str	r0, [r3, #0]
 800161c:	6813      	ldr	r3, [r2, #0]
 800161e:	6019      	str	r1, [r3, #0]
 8001620:	e007      	b.n	8001632 <_printf_i+0x1ba>
 8001622:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001626:	f102 0004 	add.w	r0, r2, #4
 800162a:	6018      	str	r0, [r3, #0]
 800162c:	6813      	ldr	r3, [r2, #0]
 800162e:	d0f6      	beq.n	800161e <_printf_i+0x1a6>
 8001630:	8019      	strh	r1, [r3, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	6123      	str	r3, [r4, #16]
 8001636:	4675      	mov	r5, lr
 8001638:	e7b1      	b.n	800159e <_printf_i+0x126>
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	1d11      	adds	r1, r2, #4
 800163e:	6019      	str	r1, [r3, #0]
 8001640:	6815      	ldr	r5, [r2, #0]
 8001642:	6862      	ldr	r2, [r4, #4]
 8001644:	2100      	movs	r1, #0
 8001646:	4628      	mov	r0, r5
 8001648:	f7fe fde2 	bl	8000210 <memchr>
 800164c:	b108      	cbz	r0, 8001652 <_printf_i+0x1da>
 800164e:	1b40      	subs	r0, r0, r5
 8001650:	6060      	str	r0, [r4, #4]
 8001652:	6863      	ldr	r3, [r4, #4]
 8001654:	6123      	str	r3, [r4, #16]
 8001656:	2300      	movs	r3, #0
 8001658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800165c:	e79f      	b.n	800159e <_printf_i+0x126>
 800165e:	6923      	ldr	r3, [r4, #16]
 8001660:	462a      	mov	r2, r5
 8001662:	4639      	mov	r1, r7
 8001664:	4630      	mov	r0, r6
 8001666:	47c0      	blx	r8
 8001668:	3001      	adds	r0, #1
 800166a:	d0a2      	beq.n	80015b2 <_printf_i+0x13a>
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	079b      	lsls	r3, r3, #30
 8001670:	d507      	bpl.n	8001682 <_printf_i+0x20a>
 8001672:	2500      	movs	r5, #0
 8001674:	f104 0919 	add.w	r9, r4, #25
 8001678:	68e3      	ldr	r3, [r4, #12]
 800167a:	9a03      	ldr	r2, [sp, #12]
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	429d      	cmp	r5, r3
 8001680:	db05      	blt.n	800168e <_printf_i+0x216>
 8001682:	68e0      	ldr	r0, [r4, #12]
 8001684:	9b03      	ldr	r3, [sp, #12]
 8001686:	4298      	cmp	r0, r3
 8001688:	bfb8      	it	lt
 800168a:	4618      	movlt	r0, r3
 800168c:	e793      	b.n	80015b6 <_printf_i+0x13e>
 800168e:	2301      	movs	r3, #1
 8001690:	464a      	mov	r2, r9
 8001692:	4639      	mov	r1, r7
 8001694:	4630      	mov	r0, r6
 8001696:	47c0      	blx	r8
 8001698:	3001      	adds	r0, #1
 800169a:	d08a      	beq.n	80015b2 <_printf_i+0x13a>
 800169c:	3501      	adds	r5, #1
 800169e:	e7eb      	b.n	8001678 <_printf_i+0x200>
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1a7      	bne.n	80015f4 <_printf_i+0x17c>
 80016a4:	780b      	ldrb	r3, [r1, #0]
 80016a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016ae:	e765      	b.n	800157c <_printf_i+0x104>
 80016b0:	08001972 	.word	0x08001972
 80016b4:	08001961 	.word	0x08001961

080016b8 <memcpy>:
 80016b8:	b510      	push	{r4, lr}
 80016ba:	1e43      	subs	r3, r0, #1
 80016bc:	440a      	add	r2, r1
 80016be:	4291      	cmp	r1, r2
 80016c0:	d100      	bne.n	80016c4 <memcpy+0xc>
 80016c2:	bd10      	pop	{r4, pc}
 80016c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80016cc:	e7f7      	b.n	80016be <memcpy+0x6>

080016ce <memmove>:
 80016ce:	4288      	cmp	r0, r1
 80016d0:	b510      	push	{r4, lr}
 80016d2:	eb01 0302 	add.w	r3, r1, r2
 80016d6:	d803      	bhi.n	80016e0 <memmove+0x12>
 80016d8:	1e42      	subs	r2, r0, #1
 80016da:	4299      	cmp	r1, r3
 80016dc:	d10c      	bne.n	80016f8 <memmove+0x2a>
 80016de:	bd10      	pop	{r4, pc}
 80016e0:	4298      	cmp	r0, r3
 80016e2:	d2f9      	bcs.n	80016d8 <memmove+0xa>
 80016e4:	1881      	adds	r1, r0, r2
 80016e6:	1ad2      	subs	r2, r2, r3
 80016e8:	42d3      	cmn	r3, r2
 80016ea:	d100      	bne.n	80016ee <memmove+0x20>
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80016f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80016f6:	e7f7      	b.n	80016e8 <memmove+0x1a>
 80016f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001700:	e7eb      	b.n	80016da <memmove+0xc>
	...

08001704 <_free_r>:
 8001704:	b538      	push	{r3, r4, r5, lr}
 8001706:	4605      	mov	r5, r0
 8001708:	2900      	cmp	r1, #0
 800170a:	d045      	beq.n	8001798 <_free_r+0x94>
 800170c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001710:	1f0c      	subs	r4, r1, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	bfb8      	it	lt
 8001716:	18e4      	addlt	r4, r4, r3
 8001718:	f000 f8d6 	bl	80018c8 <__malloc_lock>
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <_free_r+0x98>)
 800171e:	6813      	ldr	r3, [r2, #0]
 8001720:	4610      	mov	r0, r2
 8001722:	b933      	cbnz	r3, 8001732 <_free_r+0x2e>
 8001724:	6063      	str	r3, [r4, #4]
 8001726:	6014      	str	r4, [r2, #0]
 8001728:	4628      	mov	r0, r5
 800172a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800172e:	f000 b8cc 	b.w	80018ca <__malloc_unlock>
 8001732:	42a3      	cmp	r3, r4
 8001734:	d90c      	bls.n	8001750 <_free_r+0x4c>
 8001736:	6821      	ldr	r1, [r4, #0]
 8001738:	1862      	adds	r2, r4, r1
 800173a:	4293      	cmp	r3, r2
 800173c:	bf04      	itt	eq
 800173e:	681a      	ldreq	r2, [r3, #0]
 8001740:	685b      	ldreq	r3, [r3, #4]
 8001742:	6063      	str	r3, [r4, #4]
 8001744:	bf04      	itt	eq
 8001746:	1852      	addeq	r2, r2, r1
 8001748:	6022      	streq	r2, [r4, #0]
 800174a:	6004      	str	r4, [r0, #0]
 800174c:	e7ec      	b.n	8001728 <_free_r+0x24>
 800174e:	4613      	mov	r3, r2
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	b10a      	cbz	r2, 8001758 <_free_r+0x54>
 8001754:	42a2      	cmp	r2, r4
 8001756:	d9fa      	bls.n	800174e <_free_r+0x4a>
 8001758:	6819      	ldr	r1, [r3, #0]
 800175a:	1858      	adds	r0, r3, r1
 800175c:	42a0      	cmp	r0, r4
 800175e:	d10b      	bne.n	8001778 <_free_r+0x74>
 8001760:	6820      	ldr	r0, [r4, #0]
 8001762:	4401      	add	r1, r0
 8001764:	1858      	adds	r0, r3, r1
 8001766:	4282      	cmp	r2, r0
 8001768:	6019      	str	r1, [r3, #0]
 800176a:	d1dd      	bne.n	8001728 <_free_r+0x24>
 800176c:	6810      	ldr	r0, [r2, #0]
 800176e:	6852      	ldr	r2, [r2, #4]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	4401      	add	r1, r0
 8001774:	6019      	str	r1, [r3, #0]
 8001776:	e7d7      	b.n	8001728 <_free_r+0x24>
 8001778:	d902      	bls.n	8001780 <_free_r+0x7c>
 800177a:	230c      	movs	r3, #12
 800177c:	602b      	str	r3, [r5, #0]
 800177e:	e7d3      	b.n	8001728 <_free_r+0x24>
 8001780:	6820      	ldr	r0, [r4, #0]
 8001782:	1821      	adds	r1, r4, r0
 8001784:	428a      	cmp	r2, r1
 8001786:	bf04      	itt	eq
 8001788:	6811      	ldreq	r1, [r2, #0]
 800178a:	6852      	ldreq	r2, [r2, #4]
 800178c:	6062      	str	r2, [r4, #4]
 800178e:	bf04      	itt	eq
 8001790:	1809      	addeq	r1, r1, r0
 8001792:	6021      	streq	r1, [r4, #0]
 8001794:	605c      	str	r4, [r3, #4]
 8001796:	e7c7      	b.n	8001728 <_free_r+0x24>
 8001798:	bd38      	pop	{r3, r4, r5, pc}
 800179a:	bf00      	nop
 800179c:	2000008c 	.word	0x2000008c

080017a0 <_malloc_r>:
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	1ccd      	adds	r5, r1, #3
 80017a4:	f025 0503 	bic.w	r5, r5, #3
 80017a8:	3508      	adds	r5, #8
 80017aa:	2d0c      	cmp	r5, #12
 80017ac:	bf38      	it	cc
 80017ae:	250c      	movcc	r5, #12
 80017b0:	2d00      	cmp	r5, #0
 80017b2:	4606      	mov	r6, r0
 80017b4:	db01      	blt.n	80017ba <_malloc_r+0x1a>
 80017b6:	42a9      	cmp	r1, r5
 80017b8:	d903      	bls.n	80017c2 <_malloc_r+0x22>
 80017ba:	230c      	movs	r3, #12
 80017bc:	6033      	str	r3, [r6, #0]
 80017be:	2000      	movs	r0, #0
 80017c0:	bd70      	pop	{r4, r5, r6, pc}
 80017c2:	f000 f881 	bl	80018c8 <__malloc_lock>
 80017c6:	4a23      	ldr	r2, [pc, #140]	; (8001854 <_malloc_r+0xb4>)
 80017c8:	6814      	ldr	r4, [r2, #0]
 80017ca:	4621      	mov	r1, r4
 80017cc:	b991      	cbnz	r1, 80017f4 <_malloc_r+0x54>
 80017ce:	4c22      	ldr	r4, [pc, #136]	; (8001858 <_malloc_r+0xb8>)
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	b91b      	cbnz	r3, 80017dc <_malloc_r+0x3c>
 80017d4:	4630      	mov	r0, r6
 80017d6:	f000 f867 	bl	80018a8 <_sbrk_r>
 80017da:	6020      	str	r0, [r4, #0]
 80017dc:	4629      	mov	r1, r5
 80017de:	4630      	mov	r0, r6
 80017e0:	f000 f862 	bl	80018a8 <_sbrk_r>
 80017e4:	1c43      	adds	r3, r0, #1
 80017e6:	d126      	bne.n	8001836 <_malloc_r+0x96>
 80017e8:	230c      	movs	r3, #12
 80017ea:	6033      	str	r3, [r6, #0]
 80017ec:	4630      	mov	r0, r6
 80017ee:	f000 f86c 	bl	80018ca <__malloc_unlock>
 80017f2:	e7e4      	b.n	80017be <_malloc_r+0x1e>
 80017f4:	680b      	ldr	r3, [r1, #0]
 80017f6:	1b5b      	subs	r3, r3, r5
 80017f8:	d41a      	bmi.n	8001830 <_malloc_r+0x90>
 80017fa:	2b0b      	cmp	r3, #11
 80017fc:	d90f      	bls.n	800181e <_malloc_r+0x7e>
 80017fe:	600b      	str	r3, [r1, #0]
 8001800:	50cd      	str	r5, [r1, r3]
 8001802:	18cc      	adds	r4, r1, r3
 8001804:	4630      	mov	r0, r6
 8001806:	f000 f860 	bl	80018ca <__malloc_unlock>
 800180a:	f104 000b 	add.w	r0, r4, #11
 800180e:	1d23      	adds	r3, r4, #4
 8001810:	f020 0007 	bic.w	r0, r0, #7
 8001814:	1ac3      	subs	r3, r0, r3
 8001816:	d01b      	beq.n	8001850 <_malloc_r+0xb0>
 8001818:	425a      	negs	r2, r3
 800181a:	50e2      	str	r2, [r4, r3]
 800181c:	bd70      	pop	{r4, r5, r6, pc}
 800181e:	428c      	cmp	r4, r1
 8001820:	bf0d      	iteet	eq
 8001822:	6863      	ldreq	r3, [r4, #4]
 8001824:	684b      	ldrne	r3, [r1, #4]
 8001826:	6063      	strne	r3, [r4, #4]
 8001828:	6013      	streq	r3, [r2, #0]
 800182a:	bf18      	it	ne
 800182c:	460c      	movne	r4, r1
 800182e:	e7e9      	b.n	8001804 <_malloc_r+0x64>
 8001830:	460c      	mov	r4, r1
 8001832:	6849      	ldr	r1, [r1, #4]
 8001834:	e7ca      	b.n	80017cc <_malloc_r+0x2c>
 8001836:	1cc4      	adds	r4, r0, #3
 8001838:	f024 0403 	bic.w	r4, r4, #3
 800183c:	42a0      	cmp	r0, r4
 800183e:	d005      	beq.n	800184c <_malloc_r+0xac>
 8001840:	1a21      	subs	r1, r4, r0
 8001842:	4630      	mov	r0, r6
 8001844:	f000 f830 	bl	80018a8 <_sbrk_r>
 8001848:	3001      	adds	r0, #1
 800184a:	d0cd      	beq.n	80017e8 <_malloc_r+0x48>
 800184c:	6025      	str	r5, [r4, #0]
 800184e:	e7d9      	b.n	8001804 <_malloc_r+0x64>
 8001850:	bd70      	pop	{r4, r5, r6, pc}
 8001852:	bf00      	nop
 8001854:	2000008c 	.word	0x2000008c
 8001858:	20000090 	.word	0x20000090

0800185c <_realloc_r>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	4607      	mov	r7, r0
 8001860:	4614      	mov	r4, r2
 8001862:	460e      	mov	r6, r1
 8001864:	b921      	cbnz	r1, 8001870 <_realloc_r+0x14>
 8001866:	4611      	mov	r1, r2
 8001868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800186c:	f7ff bf98 	b.w	80017a0 <_malloc_r>
 8001870:	b922      	cbnz	r2, 800187c <_realloc_r+0x20>
 8001872:	f7ff ff47 	bl	8001704 <_free_r>
 8001876:	4625      	mov	r5, r4
 8001878:	4628      	mov	r0, r5
 800187a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800187c:	f000 f826 	bl	80018cc <_malloc_usable_size_r>
 8001880:	4284      	cmp	r4, r0
 8001882:	d90f      	bls.n	80018a4 <_realloc_r+0x48>
 8001884:	4621      	mov	r1, r4
 8001886:	4638      	mov	r0, r7
 8001888:	f7ff ff8a 	bl	80017a0 <_malloc_r>
 800188c:	4605      	mov	r5, r0
 800188e:	2800      	cmp	r0, #0
 8001890:	d0f2      	beq.n	8001878 <_realloc_r+0x1c>
 8001892:	4631      	mov	r1, r6
 8001894:	4622      	mov	r2, r4
 8001896:	f7ff ff0f 	bl	80016b8 <memcpy>
 800189a:	4631      	mov	r1, r6
 800189c:	4638      	mov	r0, r7
 800189e:	f7ff ff31 	bl	8001704 <_free_r>
 80018a2:	e7e9      	b.n	8001878 <_realloc_r+0x1c>
 80018a4:	4635      	mov	r5, r6
 80018a6:	e7e7      	b.n	8001878 <_realloc_r+0x1c>

080018a8 <_sbrk_r>:
 80018a8:	b538      	push	{r3, r4, r5, lr}
 80018aa:	4c06      	ldr	r4, [pc, #24]	; (80018c4 <_sbrk_r+0x1c>)
 80018ac:	2300      	movs	r3, #0
 80018ae:	4605      	mov	r5, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	6023      	str	r3, [r4, #0]
 80018b4:	f000 f814 	bl	80018e0 <_sbrk>
 80018b8:	1c43      	adds	r3, r0, #1
 80018ba:	d102      	bne.n	80018c2 <_sbrk_r+0x1a>
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	b103      	cbz	r3, 80018c2 <_sbrk_r+0x1a>
 80018c0:	602b      	str	r3, [r5, #0]
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
 80018c4:	2000009c 	.word	0x2000009c

080018c8 <__malloc_lock>:
 80018c8:	4770      	bx	lr

080018ca <__malloc_unlock>:
 80018ca:	4770      	bx	lr

080018cc <_malloc_usable_size_r>:
 80018cc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80018d0:	2800      	cmp	r0, #0
 80018d2:	f1a0 0004 	sub.w	r0, r0, #4
 80018d6:	bfbc      	itt	lt
 80018d8:	580b      	ldrlt	r3, [r1, r0]
 80018da:	18c0      	addlt	r0, r0, r3
 80018dc:	4770      	bx	lr
	...

080018e0 <_sbrk>:
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <_sbrk+0x14>)
 80018e2:	6819      	ldr	r1, [r3, #0]
 80018e4:	4602      	mov	r2, r0
 80018e6:	b909      	cbnz	r1, 80018ec <_sbrk+0xc>
 80018e8:	4903      	ldr	r1, [pc, #12]	; (80018f8 <_sbrk+0x18>)
 80018ea:	6019      	str	r1, [r3, #0]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	4402      	add	r2, r0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	4770      	bx	lr
 80018f4:	20000094 	.word	0x20000094
 80018f8:	200000a0 	.word	0x200000a0

080018fc <_init>:
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	bf00      	nop
 8001900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001902:	bc08      	pop	{r3}
 8001904:	469e      	mov	lr, r3
 8001906:	4770      	bx	lr

08001908 <_fini>:
 8001908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190a:	bf00      	nop
 800190c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190e:	bc08      	pop	{r3}
 8001910:	469e      	mov	lr, r3
 8001912:	4770      	bx	lr
